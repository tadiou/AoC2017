continue
pairs
continue
@numba_a.each_cons(2).select { |a| a.first == a.last}
@numba_a.each_cons(2)
@numba_a
continue
self.solution
self
@solution = sum_pairs(pairs)
self.solution
self
sum_pairs(pairs)
continue
debugger
continue
solution
continue
pairs.map(&:first).reduce(:+)
pairs.map(&:first)
pairs
continue
@numba_a.last
@numba_a.first
@numba_a
continue
@numba_a[@position + 1]
@numba_a
continue
@numba_a
continue
@numba_a
@numba_a[@position + 1]
qt
@numba_a[@position + 1]
continue
three.to_s.chars.to_a.map(&:to_i)
three.chars.to_a.map(&:to_i)
three
three.digits
continue
subject.new(three)
subject
continue
NumbaCaptcha.new
NumbaCaptcha.inspect
NumbaCaptcha
described_class
